[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Probability and Statistics Exercises",
    "section": "",
    "text": "About\nExercises using the R programming language for MTH 113 at the College of Staten Island\n\nThis work © 2025 by Sera Gunn is licensed under CC BY-SA 4.0",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "project-1/intro.html",
    "href": "project-1/intro.html",
    "title": "1  Intro to R",
    "section": "",
    "text": "1.1 Syntax and Functions\nR is a programming language for statistical computation and data visualization. It is widely used by stacticians, data scientists, and researchers and has a rich ecosystem of packages and libraries to facilitate data manipulation, visualization, statistical modeling, and more. R is free to download, use, and modify.\nR can be installed to your computer, but in class we will use R entirely in the browser. No installation necessary!\nLet’s get started by looking at some code. Press the “Run Code” button or click inside the text-editor and press Ctrl or Cmd + Enter to execute the code. It may take a few seconds for your browser to load the R software.\nTo create a bar graph, we can use the barplot() function:\nYou may have noticed some symbols like # or &lt;- or c(...) in the code. These are called syntax and I will summarize new syntax and functions at the end of each section.",
    "crumbs": [
      "Project 1",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Intro to R</span>"
    ]
  },
  {
    "objectID": "project-1/intro.html#syntax-and-functions",
    "href": "project-1/intro.html#syntax-and-functions",
    "title": "1  Intro to R",
    "section": "",
    "text": "# denotes a comment, this is a term in programming to mean text that is not computed, but merely serves to describe the adjacent code. For instance, the following two lines are identical as far as R is concerned—the comment is only read by us and not by R.\n\n1 + 1 # Computes 1 + 1\n1 + 1\n\n&lt;- is called an assignment operator and is used to store previous values into a variable that can be used later on. For instance, we might write “if \\(x\n= 3\\) and \\(y = 4\\) then \\(x * y = 12\\).” In R, this looks like\n\n\n\n\n\n\n\n\nExercise 1.2 In the box above, let \\(x = 3, y = 4, z = -2, w = 1\\) and compute \\(x + y * z - w\\).\n\n\nc(1, 2, 3, 4, ...) is R’s notation for a list. The c stands for “combine” or “collect.”\ntable(...) takes a list of data and returns a table counting the number of occurrences of each value.\nbarplot(...) creates a bar graph",
    "crumbs": [
      "Project 1",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Intro to R</span>"
    ]
  },
  {
    "objectID": "project-1/bars-and-pies.html",
    "href": "project-1/bars-and-pies.html",
    "title": "2  Activity 1",
    "section": "",
    "text": "2.1 Dice activity\nTake two dice and roll the pair of them 25 times, keeping track of the sum of their values. Fill those into the dice_rolls variable below.",
    "crumbs": [
      "Project 1",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Activity 1</span>"
    ]
  },
  {
    "objectID": "project-1/bars-and-pies.html#dice-activity",
    "href": "project-1/bars-and-pies.html#dice-activity",
    "title": "2  Activity 1",
    "section": "",
    "text": "Exercise 2.1  \n\nFrom the sum_count table, report how many times you rolled a 2, 3, 4, etc. After you have done that, change the last line from sum_count to barplot(sum_count) and run that to get a barplot.\nWhich sum (or sums) occurred the most number of times?\nBased on your data, are we more likely to roll a 2 or a 7?\nThe function mean() returns the mean of a dataset. Run the next code box and report the mean of the data.\n\n\n\n\n\n\n\n\nNote\n\n\n\nIt is likely the case that in 25 rolls there were some totals you never rolled, if so, report those numbers as 0.",
    "crumbs": [
      "Project 1",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Activity 1</span>"
    ]
  },
  {
    "objectID": "project-1/bars-and-pies.html#data-activity",
    "href": "project-1/bars-and-pies.html#data-activity",
    "title": "2  Activity 1",
    "section": "2.2 Data activity",
    "text": "2.2 Data activity\nR, and it’s many packages, contain many different datasets for practicing its features. One of these is the starwars dataset in the dplyr package. To access this, we first load the package with library(\"dplyr\") and then we can preview the dataset by simply writing starwars.\n\n\n\n\n\n\nNote\n\n\n\nWhile not strictly, necessary, I added suppressMessages() to hide the messages that often come up when loading a package.\n\n\n\n\n\n\n\n\nThis is just a preview of the first 10 rows of data. Some of the columns aren’t displayed either. You can see the full dataset here.\nIf we want information about the starwars dataset (or any R function), we can use the ? operator.\n\n\n\n\n\n\n\nExercise 2.2  \n\nWhat types of variables are included in this dataset? Which variables are quantitative?\nIf we want to talk about a specific column, like gender, we can use the $ operator. Let’s use this now to create a pie chart of character gender in Star Wars. Make a quick sketch of the resulting chart.\n\n\n\n\n\n\n\n\nTry replacing gender by a different column like height, sex, or homeworld. For which of these does it make sense to use a pie chart? For which of these does a pie chart make sense but it would be better to group smaller categories into “other”?",
    "crumbs": [
      "Project 1",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Activity 1</span>"
    ]
  },
  {
    "objectID": "project-1/bars-and-pies.html#syntax-and-functions",
    "href": "project-1/bars-and-pies.html#syntax-and-functions",
    "title": "2  Activity 1",
    "section": "2.3 Syntax and Functions",
    "text": "2.3 Syntax and Functions\n\nmean(...) the mean or average of a list of numbers\n$ takes a specific column from a dataset e.g. starwars$height\n? put this before any function on built-in dataset to get more information about it\npie(...) creates a pie chart\nlibrary(...) used to add additional features to R (i.e. new functions and new datasets). suppressMessages(...) loads these in without printing any new messages.",
    "crumbs": [
      "Project 1",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Activity 1</span>"
    ]
  },
  {
    "objectID": "project-2/calculating-statistics.html",
    "href": "project-2/calculating-statistics.html",
    "title": "3  Calculating Mean, Median, etc. in R",
    "section": "",
    "text": "3.1 Mode\nWe’ve seen the mean() function before in Activity 1. This calculates the mean of a set of data. For instance\nLikewise, the median(), sd(), var(), and range() functions exists to calculate the median, (sample) standard deviation, (sample) variance, and range respectively. Remember that the sample s.d. or var formulas have a denominator of \\(n - 1\\) rather than \\(n\\).\nMode is a less common calculation and the mode() function in R does not calculate the mode but does something much different having to do with programming internals.\nInstead, we can calculate the mode as we did in Activity 1 by using the table() function and then reading the output to determine which data point occurred the most.",
    "crumbs": [
      "Project 2",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Calculating Mean, Median, etc. in R</span>"
    ]
  },
  {
    "objectID": "project-2/box-hist.html",
    "href": "project-2/box-hist.html",
    "title": "4  Boxplots and Histograms",
    "section": "",
    "text": "4.1 Histograms\nTo create a basic box and whisker plot, we use the boxplot() command. As per usual, we define our data in a variable and then use that variable in the boxplot function.\nRemember that the lines of the boxplot correspond to the quartiles (minimum, 25% mark, 50% mark, 75% mark, maximum). A related and quite useful function is summary() which will print out all of these values as numbers for us.\nCompare the output of this command to where the lines of boxplot are positioned.\nHistograms are created with the hist() function. For instance\nUnlike boxplots, we usually want to configure our histogram, i.e. set a number of bins and/or declare the beginning and end of each bin.\nWe can do this by adding breaks=... to the end of our histogram function. And the two most common types of breaks are to set a number of bins or to set where the boundaries of those bins are.\nThere is one more option we need to discuss which is the right=FALSE option. By default, bins will include their right endpoint, so a bin that goes from \\(10\\) to \\(20\\) will include every data point equal to \\(20\\). Adding right=FALSE moves all the \\(20\\) data points into the next bin over (bins will include the left point but not the right point). Compare:\nThere are \\(6\\) data points equal to \\(20\\). In the first histogram those \\(6\\) count for the middle bin, in the second histogram the count for the right bin.",
    "crumbs": [
      "Project 2",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Boxplots and Histograms</span>"
    ]
  }
]