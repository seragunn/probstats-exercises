{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6ff8832a",
   "metadata": {},
   "source": [
    "# Activity 3\n",
    "\n",
    "## Working by hand\n",
    "\n",
    "R has tools for generating random coin flips, dice rolls, drawings, choosing\n",
    "random decimals, and more. Before we get to that, let's practice doing this by\n",
    "hand.\n",
    "\n",
    "::: {#exr-dice-activity}\n",
    "1. Draw a 6 by 6 grid and label the rows and columns with the numbers 1 to 6.\n",
    "   There should be enough room in each cell to maintain a tally.\n",
    "2. Find two disjoint rectangles in the grid with the same area. These will\n",
    "   represent two *mutually exclusive* events. Indicate these events with a\n",
    "border.\n",
    "3. Roll your pair of dice 30 times. One die of your choice will refer to the\n",
    "   row and the other to the column. Make a tally for each time the dice roll\n",
    "lands in that cell of your grid. E.g. if you roll a 2 and a 3 you make a mark\n",
    "in row 2, col 3.\n",
    ":::\n",
    "\n",
    "## Working with sample\n",
    "\n",
    "In R, to sample whole numbers like dice rolls, we can use the `sample()`\n",
    "function. Here we sample $6$ numbers from $1$ to $6$.\n",
    "\n",
    "```{webr}\n",
    "sample(1:6, 6)\n",
    "```\n",
    "\n",
    "::: {#exr-sampling}\n",
    "1. Run this example a few times. Do you notice anything?\n",
    "2. What error message do you get when you ask to sample $10$ dice rolls with\n",
    "   `sample(1:6, 10)`?\n",
    ":::\n",
    "\n",
    "When we get error messages like this, we might need help interpreting them.\n",
    "Search engines and Large Language Models are good tools to use for interpreting\n",
    "error messages. Here the issue is that by default, `sample` assumes we are\n",
    "drawing numbers from a hat without returning our drawn numbers to the hat (so\n",
    "they will never repeat). To change this behavior, we add `replace=TRUE` to our\n",
    "function as follows.\n",
    "\n",
    "```{webr}\n",
    "sample(1:6, 10, replace=TRUE)\n",
    "```\n",
    "\n",
    "::: {#exr-sampling-with-replacement}\n",
    "Run this and write down the output.\n",
    ":::\n",
    "\n",
    "If you remember, in Activity 1 we we generated a barplot by rolling dice\n",
    "ourselves. Let's use our `sample` function to speed that up.\n",
    "\n",
    "```{webr}\n",
    "dice_rolls <- sample(1:6, 1000, replace=TRUE)\n",
    "count <- table(dice_rolls)\n",
    "count\n",
    "```\n",
    "\n",
    "::: {#exr-sampling-bar-graph}\n",
    "1. Run the above code and report the table.\n",
    "2. If we want to add two dice together we can do this by adding one `sample`\n",
    "function to another. Change the first line to read\n",
    "\n",
    "```R\n",
    "dice_rolls <- sample(1:6, 1000, replace=TRUE) + sample(1:6, 1000, replace=TRUE)\n",
    "```\n",
    "\n",
    "Then change the last line from `count` to `barplot(count)`. Draw a rough sketch\n",
    "of what you see.\n",
    ":::\n",
    "\n",
    "::: {.callout-note}\n",
    "To better understand what doing `sample() + sample()` does, imagine the first sample is some list like `3, 1, 6, 2, 5, ...` and the second is a list like `4, 1, 4, 2, 5, ...`. When we add these lists, R creates the list `7, 2, 10, 4, 10, ...`, adding in pairs.\n",
    ":::\n",
    "\n",
    "## Using sample to fill our grid\n",
    "\n",
    "Going back to our 6x6 grid. We want to take our dice rolls and record not their\n",
    "sum but their row and column. That looks something like\n",
    "\n",
    "```{webr}\n",
    "# Set the number of simulations\n",
    "n <- 30\n",
    "\n",
    "# Simulate rolling two dice\n",
    "die1 <- sample(1:6, n, replace=TRUE)\n",
    "die2 <- sample(1:6, n, replace=TRUE)\n",
    "\n",
    "# Create a 6x6 table\n",
    "outcome_table <- matrix(0, nrow = 6, ncol = 6)\n",
    "\n",
    "# Go through each pair and tally where they land\n",
    "for (i in 1:n) {\n",
    "  outcome_table[die1[i], die2[i]] <- outcome_table[die1[i], die2[i]] + 1\n",
    "}\n",
    "\n",
    "outcome_table\n",
    "```\n",
    "\n",
    "::: {#exr-dice-grid}\n",
    "1. Run this a few times. With only 30 samples and 36 cells, we're not going to\n",
    "   see very large numbers. What is the largest number you see if you run this 5\n",
    "times or so?\n",
    "2. Now set $n$ to $10000$ (i.e. `n <- 10000`) and record that table. We expect\n",
    "   to see each outcome with a probability of $1/36$ each time we roll and\n",
    "$10000/36 \\approx 277.8$ overall.\n",
    "3. What is the relative frequency of each of your mutually exclusive events from @exr-dice-activity? Remember: relative frequency means how many times the dice landed in that rectangle (add up the numbers) divided by $n$. You can edit the next code box to help out with this.\n",
    "\n",
    "```{webr}\n",
    "(250 + 270 + 280) / 10000\n",
    "```\n",
    "\n",
    "4. Now consider the events:\n",
    "    a. The dice are both the same ($1,1$, $2,2$, $3,3$, etc.) which is the main diagonal of your grid\n",
    "    b. The sum of the dice is $7$ ($1,6$, $2,5$, $3,4$, etc.) which is the other diagonal\n",
    "    c. The first die is $1$ (the first row)\n",
    "The next code box will help you calculate the count of each of these events. Write those numbers down.\n",
    "5. Look back at the grid and write down the count of the events A and B (same number and sum is 7), A and C (same number and first row), B and C (sum is 7 and first row).\n",
    "6. Which pairs are mutually exclusive (no overlap) and which are *independent*?\n",
    ":::\n",
    "\n",
    "```{webr}\n",
    "A <- sum(diag(outcome_table))\n",
    "B <- outcome_table[1,6] + outcome_table[2,5] + outcome_table[3,4] + outcome_table[4,3] + outcome_table[5,2] + outcome_table[6,1]\n",
    "C <- sum(outcome_table[1,])\n",
    "\n",
    "\n",
    "A\n",
    "B\n",
    "C\n",
    "```\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3",
   "path": "/usr/share/jupyter/kernels/python3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
